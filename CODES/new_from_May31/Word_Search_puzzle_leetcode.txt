Given an m x n grid of characters board and a string word, return true if word exists in the grid.

The word can be constructed from letters of sequentially adjacent cells, where adjacent cells are horizontally or vertically neighboring. The same letter cell may not be used more than once.

board = [["A","B","C","E"],["S","F","C","S"],["A","D","E","E"]], word = "ABCCED"
Output: true


-------------------------------------------------

DFS APPROACH--

class Solution {
public:
    
    bool help(int i,int j,int rows,int cols,vector<vector<char>>&board,int ptr,string &word)
    {
        if(ptr>=word.length()) return true;
        if(i<0 || j<0 || i==rows || j==cols||board[i][j]!=word[ptr]) return false;
        
        
        char rep = board[i][j];
        board[i][j] = '#';
        
        bool op1 = help(i+1,j,rows,cols,board,ptr+1,word);
        bool op2 = help(i,j+1,rows,cols,board,ptr+1,word);
        bool op3 = help(i-1,j,rows,cols,board,ptr+1,word);
        bool op4 = help(i,j-1,rows,cols,board,ptr+1,word);
        
        board[i][j] = rep;
        
        return (op1||op2||op3||op4);
        
    }
    
    bool exist(vector<vector<char>>& board, string word) {
        //bool ans = false;
        
        for(int i=0;i<board.size();i++)
        {
            for(int j=0;j<board[0].size();j++)
            {
                if(board[i][j] == word[0])
                {
                    if(help(i,j,board.size(),board[0].size(),board,0,word))
                    {
                        return true;
                    }
                }
            }
        }
        return false;
    }
};