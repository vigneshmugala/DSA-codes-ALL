/*
There are N Trees planted on flat land at various positions along X-Axis.
You are given the X-Axis poistions of the trees in ascending order.
Mr ABC wants to setup a water irrigation system for T trees which are 
near to point-X.

Your task is to find and return the positions of the T nearest trees to point-X.
and answer should be ascending order. To find the nearest positions of trees to 
point-X, the rule is as follows:
	- There are two trees at posistions X1 and X2, if X1 said to be nearest
	  tree to point-X, if, [ |X1 - X| < |X2 - X| ] 
	  OR [ (|X1 - X| == |X2 - X| ) and X1 < X2 ]


Input Format:
-------------
Line-1: 3 space separated integers N, T, X, number of trees, values of T and X.
Line-2: N space separated integers, posistions of the trees.

Output Format:
--------------
Print the list of the posistions of T trees near to point-X.


Sample Input-1:
---------------
6 3 7
1 4 5 7 9 10 

Sample Output-1:
----------------
[5, 7, 9]



Sample Input-2:
---------------
6 4 2
-3 -1 0 1 3 4 

Sample Output-2:
----------------
[0, 1, 3, 4]

10 6 -9
-30 -19 -8 -5 -4 6 11 12 17 26
-19 -8 -5 -4 6 11


*/

import java.util.*;
public class Test
{
    public static void main(String[] args)
    {
        int n,ct,x;
        Scanner sc = new Scanner(System.in);
        n = sc.nextInt();
        ct = sc.nextInt();
        x = sc.nextInt();
         
        //int arr[] = new int[n];
        ArrayList<Integer> al = new ArrayList<Integer>();
        ArrayList<Integer> sol = new ArrayList<Integer>();
        for(int i=0;i<n;i++)
        {
            int in;
            in = sc.nextInt();
            al.add(in);
        }
        
        int j=0;
        //int dis = 0;
        int mindis = 9999;
        //int minele = 9999;
        int mindex = 0;
        //Collections.sort(al,Collections.reverseOrder());
        while(j<ct)
        {
            for(int i=0;i<al.size();i++)
            {
               int dis = Math.abs(x-al.get(i));
                if(dis<=mindis)
                {
                    mindis = dis;
                    mindex = i;
                }
            }
           sol.add(al.get(mindex));
           al.remove(al.get(mindex));
           mindex = 0;
          // minele = 9999;
           mindis = 9999;
           j++;
        }
        Collections.sort(sol);
        System.out.println(sol);
    }
    
}