A matrix diagonal is a diagonal line of cells starting from some cell in either the topmost row or leftmost column and going in the bottom-right direction until reaching the matrix's end. For example, the matrix diagonal starting from mat[2][0], where mat is a 6 x 3 matrix, includes cells mat[2][0], mat[3][1], and mat[4][2].

Given an m x n matrix mat of integers, sort each matrix diagonal in ascending order and return the resulting matrix.

 

Example 1:


Input: mat = [[3,3,1,1],[2,2,1,2],[1,1,1,2]]
Output: [[1,1,1,1],[1,2,2,2],[1,2,3,3]]
Example 2:

Input: mat = [[11,25,66,1,69,7],[23,55,17,45,15,52],[75,31,36,44,58,8],[22,27,33,25,68,4],[84,28,14,11,5,50]]
Output: [[5,17,4,1,52,7],[11,11,25,45,8,69],[14,23,25,44,58,15],[22,27,31,36,50,66],[84,28,75,33,55,68]]


LEETCODE #1329

class Solution {
public:
    vector<vector<int>> diagonalSort(vector<vector<int>>& mat) {
        //vector<vector<int>> ans;
        unordered_map<int,vector<int>> ump;
        int row=mat.size();
        int col=mat[0].size();
        
        for(int i=0;i<row;i++)
            for(int j=0;j<col;j++)
                ump[i-j].push_back(mat[i][j]);
        
        for(int k=-(col-1);k<row;k++)
            sort(ump[k].begin(),ump[k].end());
        
        for(int i=row-1;i>=0;i--)
        {
            for(int j=col-1;j>=0;j--)
            {
                mat[i][j]=ump[i-j].back();
                ump[i-j].pop_back();
            }
        }
        
        return mat;
        /*for(auto k: ump)
        {
            cout<<k.first<<"-->";
            
            for(auto z: k.second)
            {
                cout<<z<<" ";
            }
            cout<<endl;
        }*/
        
        /*
        (0,0)(0,1)(0,2)(0,3)
        (1,0)(1,1)(1,2)(1,3)
        (2,0)(2,1)(2,2)(2,3)
        (3,0)(3,1)(3,2)(3,3)
        */
        
    }
};