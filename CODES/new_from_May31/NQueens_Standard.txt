/* N Queens Problem 
 Format - > [ vector<vector<int>> ] where we store chessBoard ( queen column positions ) in a 1D array and put all
   possible combinations into a 2D array 
*/

#include<bits/stdc++.h>
using namespace std;

bool safe(int row, int col, vector<int> &temp)
{
	for(int b=0;b<temp.size();b++)
	{
		if(temp[b]==col)
		{
			return false;
		}
		
		if(abs(row - b) == abs(temp[b]-col))
		{
			return false;
		}
	}
   return true;
}



void Nqueens(int row, int n, vector<int> &temp, vector<vector<int>> &ans)
{
	if(row==n)
	{
	   ans.push_back(temp);
	   return;
	}
	
	for(int j=0;j<n;j++)
	{
		if(safe(row,j,temp))
		{
			temp.push_back(j);
			Nqueens(row+1,n,temp,ans);
			temp.pop_back();
		}
	}
}


int main()
{
	int n;
	cin>>n;
	
	vector<int> temp;
	vector<vector<int>>ans;
	
	Nqueens(0,n,temp,ans);
	
	for(auto b: ans)
	{
		for(auto y:b)
		{
			cout<<y<<" ";
		}
	  cout<<'\n';
	}
}