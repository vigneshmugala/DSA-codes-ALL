// 0 , 1 , 2 PROBLEM 

class Solution {
public:
    void sortColors(vector<int>& nums) {
        // Dutch National Flag Partitioning Problem
        // colors are of Indian flag
        int n = nums.size();
        int saffron = 0; // behind this saffron pointer all balls are saffron colored.
        int green = n-1; // beyond this greend pointer all balls are green colored.
        int white = 0; // between saffron ptr and white ptr all balls are white colored.
        // between white ptr and green ptr all colors are unknown and we have to categorize and put them in proper Place using Pointers..
        
        while(white <= green)
        {
            if(nums[white] == 0) //0 indicates saffron color
            {
                swap(nums[saffron] , nums[white]);
                saffron++;
                white++;
            }
            
            else if(nums[white] == 2) // 2 indicates green color
            {
                swap(nums[green],nums[white]);
                green--;
            }
            
            else //1 indicates white color
            {
                white++;   
            }
        }
        
        //in short we are pushing all zeros in extreme left and twos to extreme right and in between all we left with are 1's that's why we just white's pointer ++ but we don't swap
    }
};