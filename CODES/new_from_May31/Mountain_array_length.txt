Given an array, return the length of the longest subarray, which is a mountain.
return 0 if there is no mountain.

finding mountain array:
array is mountain array if and only if :
 1) array length should be greater than 3
 2) there exists some index i(0-indexed) with 0<i<arr.length-1 
      2(i). arr[0] < arr[1] < ..... < arr[i-1] < arr[i]
      2(ii) arr[i] > arr[i+1] > .... > arr[arr.legth-1]

example:
input =7
2 1 4 7 3 2 5
output =5
The largest mountain is 1 4 7 3 2 which has length 5

input =3
2 2 2 
output =0
there is no mountain

input =9
1 2 3 2 1 0 2 3 
output =6
--------------------------------------------------------------------------
#include<bits/stdc++.h>
using namespace std;

int main()
{
    int n;
    cin>>n;
    
    vector<int> arr(n);
    for(int i=0;i<n;i++)
    {
        cin>>arr[i];
    }
    
    int uplen = 0;
    int downlen = 0;
    
    bool peak = false;
    int maxlen = 0;
    for(int i=0;i<n;i++)
    {
        if(!peak && arr[i]<arr[i+1])
        {
            maxlen = max(maxlen , uplen+downlen-1);
            downlen = 0;
            uplen = 0;
            uplen++;
            peak = true;
        }
        if(peak && arr[i]>arr[i+1])
        {
            peak=false;
            downlen++;
        }
        if(peak && arr[i]<arr[i+1])
        {
            uplen++;
        }
        if(!peak && arr[i]>arr[i+1] && uplen!=0)
        {
            downlen++;
        }
    }
    if(n>3) cout<<maxlen<<'\n';
    else cout<<0<<'\n';
}