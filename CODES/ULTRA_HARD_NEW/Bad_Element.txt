/*Program-2: BadElement
================
consider variables i and j and some no.of jumps allowed, i=0 and j=1 initially.
in every jump out of the total no.of jumps allowed, there are two ways possible.
i=i+j and j=j+1
or i doesnt change but j=j+1
We should see that i is never equal to the given Bad element, following that condition, find out the maximum position that i can reach in the give no.of jumps.

Ex: Consider
Input=no.of jumps=4 and Bad Element=6
Scenario 1:
Jump1: i=0+1=1   j=j+1=2
Jump2: i=1+2=3   j=j+1=3
Jump3: i=3+3=6-> WRONG!      (i is equal to the bad element. So,jump through the second condition where only j increments and i remains the same.)
             CORRECT: i=3 j=j+1=4
Jump4: i=3+4=7   j=j+1=5

Hence in 4 jumps, i=7 was achieved.

Scenario 2:
Jump1: Let us consider that i doesnt change in the initial jump itself, only j is incremented by 1
             i=0   j=j+1=2
Jump2: i=0+2=2   j=j+1=3
Jump3: i=2+3=5   j=j+1=4
Jump4: i=5+4=9   j=j+1=5

Hence in 4 jumps, i=9 was achieved.

Hence the maximum position reachable without reaching bad element in any jump is 9.
Hence return 9
*/

#include<bits/stdc++.h>
using namespace std;

int maxI(int i,int j,int jumps,int badEle)
{
	int p1=0;
	int p2=0;
	
	if(jumps == 0)
	{
		return i;
	}
	if(i+j != badEle)
	{
		p1=maxI(i+j, j+1, jumps-1, badEle);
	}
	
	  p2=maxI(i,j+1,jumps-1,badEle);
	
	return max(p1,p2);
}

int main()
{
   int i=0;
   int j=1;
   
   int jumps,badEle;
   cout<<"Enter no.of Jumps: "<<endl;
   cin>>jumps;
   cout<<"Enter bad element value: "<<endl;
   cin>>badEle;
   
    //at each step i=i+j may happen or may not happen
    //but j=j+1 happen no matter what
    int ans = maxI(i,j,jumps,badEle);
    cout<<"Maximum I value possible is: " <<ans<<endl;
}