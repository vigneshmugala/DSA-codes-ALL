/*You are a professional robber planning to rob houses along a street. Each house has a certain amount of money stashed, the only constraint stopping you from robbing each of them is that adjacent houses have security systems connected and it will automatically contact the police if two adjacent houses were broken into on the same night.

Given an integer array nums representing the amount of money of each house, return the maximum amount of money you can rob tonight without alerting the police.


/*Input: nums = [1,2,3,1]
Output: 4
Explanation: Rob house 1 (money = 1) and then rob house 3 (money = 3).
Total amount you can rob = 1 + 3 = 4.*/

/*Input: nums = [2,7,9,3,1]
Output: 12
Explanation: Rob house 1 (money = 2), rob house 3 (money = 9) and rob house 5 (money = 1).
Total amount you can rob = 2 +9 + 1 = 12*/

// VARIATION -2 : CIRCULAR LAST HOUSE AND FIRST HOUSSE ARE CONNECTED.
// LEETCODE PROBLEM NO.213 LEAD CODING WITH FARAJ ASSIGNMENT 1//
#include<bits/stdc++.h>
using namespace std;

int profitRob(int i,int end, int arr[], int size, int sum)
{
	if(size==1) return arr[0];
	if(size==2) return max(arr[0],arr[1]);
	if(i>end)return sum; // if we reach last house we will return profit(if first house is selected we will move end pointer back -1)
	
	//choice 1 for robber: choose house [i] and get arr[i] money and go to alternate house (not adjacent)
	
	 // if we select element 1 (i==0) then we will move end pointer backwards end = size-2;
	 if(i==0) end=size-2;
	 int op1 = profitRob(i+2,end,arr,size,sum+arr[i]);
	
	//choice 2 for robber: don't choose house [i] and choose next house
	
	 // backtrack the choice that we made before, if we don't select element 1 (i==0) then we undo the changes..
	 if(i==0) end=size-1; 
	 int op2 = profitRob(i+1,end,arr,size,sum);
	 
	 return max(op1,op2); //return max profit of both choices
}

int main()
{
	int n;
	cin>>n;
	
	int arr[n];
	for(int i=0;i<n;i++)
	{
		cin>>arr[i];
	}
	
	cout<<profitRob(0,size-1,arr,n,0)<<'\n';
}

