You are given an integer array bags where the ith bag contains bags[i] balls. 
You are also given an integer maxOperations.

You can perform the following operation at most maxOperations times:

Take any bag of balls and divide it into two new bags with a positive number of balls.
For example, a bag of 5 balls can become two new bags of 1 and 4 balls, or two new bags of 2 and 3 balls

Your penalty is the maximum number of balls in a bag. 
You want to minimize your penalty after the operations.

Return the minimum possible penalty after performing the operations.

Example 1:
input =1
9
2
bags = [9], maxOperations = 2
output = 3
Explanation:
- Divide the bag with 9 balls into two bags of sizes 6 and 3. [9] -> [6,3].
- Divide the bag with 6 balls into two bags of sizes 3 and 3. [6,3] -> [3,3,3].
The bag with the most number of balls has 3 balls, so your penalty is 3 and you should return 3.

Example 2:
input =4
2 4 8 2
4
output =2

bags = [2,4,8,2], maxOperations = 4
output: 2
Explanation:
- Divide the bag with 8 balls into two bags of sizes 4 and 4. [2,4,8,2] -> [2,4,4,4,2].
- Divide the bag with 4 balls into two bags of sizes 2 and 2. [2,4,4,4,2] -> [2,2,2,4,4,2].
- Divide the bag with 4 balls into two bags of sizes 2 and 2. [2,2,2,4,4,2] -> [2,2,2,2,2,4,2].
- Divide the bag with 4 balls into two bags of sizes 2 and 2. [2,2,2,2,2,4,2] -> [2,2,2,2,2,2,2,2].
The bag with the most number of balls has 2 balls, so your penalty is 2 an you should return 2.

Example 3:
input =2
7 17
2
output =7

Input: bags = [7,17], maxOperations = 2
Output: 7


-------------------------------------------------------------------------------------------------------------------------------------

#include<bits/stdc++.h>
using namespace std;

int getMax(vector<int> v)
{
    vector<int> temp=v;
    sort(temp.begin(),temp.end());
    return temp[v.size()-1];
}

int getMaxPos(vector<int>v , int maxele)
{
    for(int i=0;i<v.size();i++)
    {
        if(v[i]==maxele)
        {
            return i;
        }
    }
  return -1;
}
int getSecondmax(vector<int> v)
{
    vector<int>temp=v;
    vector<int>v2;
    set<int>s;
    sort(temp.begin(),temp.end());
    for(int i=0;i<temp.size();i++)
    {
        s.insert(temp[i]);
    }
    for(int x: s)
    {
        v2.push_back(x);
    }
    return v2[v2.size()-2];
}
bool checkCompatiable(vector<int>v , int p1, int p2)
{
   if(v.size()==1)
   {
       if(p1!=0)
       {
           if(p1%p2==0)
           {
               return true;
           }
       }
   }
   else
   {
       int ref= getSecondmax(v);
       if(p1==ref||p2==ref)
       {
           return true;
       }
   }
   return false;
   
}
int bestPartition(vector<int>v, int maxele)
{
    int p1=0; int p2=0;
    for(int i=0;i<=maxele;i++)
    {
       p1=i;
       p2=maxele-i;
      // cout<<checkCompatiable(v,p1,p2)<<"for: "<<p1<<"and"<<p2<<endl; 
       if(checkCompatiable(v,p1,p2))
       {
           break;
       }
    }
  return p1;
}

vector<int> replaceAndModify(vector<int> v , int maxpos, int p1, int p2)
{
  vector<int> copy;
    for(int i=0;i<v.size();i++)
    {
        if(i!=maxpos)
        {
            copy.push_back(v[i]);
        }
        else if(i==maxpos)
        {
            copy.push_back(p1);
            copy.push_back(p2);
        }
    }
  return copy;
}

int main()
{
   int n;
   cin>>n;
   
   int arr[n];
   vector<int>v;
   for(int i=0;i<n;i++)
   {
       cin>>arr[i];
       v.push_back(arr[i]);
   }
   
   int moves;
   cin>>moves;
   
   int mc=0;
   
   while(mc<moves)
   {
       int maxv = getMax(v);
       int maxpos = getMaxPos(v,maxv);
       int partone = bestPartition(v,maxv);
       int parttwo = maxv - partone;
       v=replaceAndModify(v,maxpos,partone,parttwo);
       mc++;
   }
  cout<<getMax(v)<<endl;
}