Method 1: Memoization

#include <bits/stdc++.h> 
int knapHelp(int i, int maxWeight, vector<int> &weight, vector<int> &value, vector<vector<int>> &dp)
{
    if(i<0) return 0;
    if(dp[i][maxWeight]!=-1)return dp[i][maxWeight];
    int pick = -1e9;
    if(maxWeight-weight[i] >=0)
         pick = value[i] + knapHelp(i-1, maxWeight-weight[i], weight, value,dp);
    int notPick = knapHelp(i-1, maxWeight, weight, value,dp);
    return dp[i][maxWeight] = max(pick,notPick);
}

int knapsack(vector<int> weight, vector<int> value, int n, int maxWeight) 
{
     vector<vector<int>> dp(n, vector<int>(maxWeight+1 , -1));
     return knapHelp(value.size()-1,maxWeight,weight,value,dp);
}
----------------------------------------------------------------------------------------------------------------------
Method 2: Tabulation


int knapsack(vector<int> weight, vector<int> value, int n, int maxWeight) 
{
     int dp[n][maxWeight+1];
      
     for(int i=0; i<n; i++)
         for(int j=0; j<=maxWeight; j++)
             dp[i][j] = 0;
    
     
     for(int c=weight[0]; c<=maxWeight; c++)
         dp[0][c] = value[0];
     
     for(int i=1; i<n; i++)
     {
         for(int c=0; c<=maxWeight; c++)
         {
             int pick = -1e9;
             int notPick = dp[i-1][c];
             if(c-weight[i]>=0)
                 pick = value[i] + dp[i-1][c-weight[i]];
             dp[i][c]=max(pick,notPick);
         }
     }
     return dp[n-1][maxWeight];
}