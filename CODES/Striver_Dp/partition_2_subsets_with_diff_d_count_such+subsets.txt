Problem link:
https://www.codingninjas.com/codestudio/problems/partitions-with-given-difference_3751628?source=youtube&campaign=striver_dp_videos&utm_source=youtube&utm_medium=affiliate&utm_campaign=striver_dp_videos

--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Method 1: Recursion

#include <bits/stdc++.h>

int countNoofSubsets(int i, int s2, vector<int> &arr)
{
    if(i == 0)
    {
        if(arr[0] == 0 && s2==0) return 2;
        if(s2==0 || s2==arr[0]) return 1;
        return 0;
    }

    int notTake = countNoofSubsets(i-1, s2, arr);
    int take = 0;
    if(arr[i] <= s2)
        take = countNoofSubsets(i-1, s2-arr[i], arr);
    return take+notTake;
}



int countPartitions(int n, int d, vector<int> &arr) {
    int totsum = 0;
    for(int i=0; i<n; i++) totsum += arr[i];
    
    //s1 ,, s2
    // s1 + s2 = totsum we know that
    // s1 = totsum - s2...
    // so, we need to make sure that s1 - s2 = d right, and s1>=s2 anyways
    // so  substituting we get. totsum - s2 - s2 = d;
    //totsum - 2*s2 = d
    // s2 = (totsum - d)/2..
    // It means we have to count number of subsets with their sum of elements as s2. then we automatically find answer to how many subsets we need such that s1-s2 = d.
    //SOME BASE CASES.
    
    int s2 = (totsum - d)/2;
    if(totsum-d < 0) return 0;
    if((totsum-d) % 2 == 1) return 0; //if odd then fractional answer will come, so it's not possible
    else
    {
        return countNoofSubsets(n-1,s2,arr);
    }
}


-------------------------------------------------------------

Method 2: Memoization

#include <bits/stdc++.h>
int mod = (1e9 + 7);
int countNoofSubsets(int i, int s2, vector<int> &arr, vector<vector<int>> &dp)
{
    if(i == 0)
    {
        if(arr[0] == 0 && s2==0) return 2;
        if(s2==0 || s2==arr[0]) return 1;
        return 0;
    }
    
    if(dp[i][s2] != -1) return dp[i][s2];
    
    int notTake = countNoofSubsets(i-1, s2, arr, dp);
    int take = 0;
    if(arr[i] <= s2)
        take = countNoofSubsets(i-1, s2-arr[i], arr, dp);
    return dp[i][s2] = (take+notTake) % mod;
}



int countPartitions(int n, int d, vector<int> &arr) {
    int totsum = 0;
    for(int i=0; i<n; i++) totsum += arr[i];
    
    //s1 ,, s2
    // s1 + s2 = totsum we know that
    // s1 = totsum - s2...
    // so, we need to make sure that s1 - s2 = d right, and s1>=s2 anyways
    // so  substituting we get. totsum - s2 - s2 = d;
    //totsum - 2*s2 = d
    // s2 = (totsum - d)/2..
    // It means we have to count number of subsets with their sum of elements as s2. then we automatically find answer to how many subsets we need such that s1-s2 = d.
    //SOME BASE CASES.
    
    int s2 = (totsum - d)/2;
    if(totsum-d < 0) return 0;
    if((totsum-d) % 2 == 1) return 0; //if odd then fractional answer will come, so it's not possible
    else
    {
        vector<vector<int>> dp(n, vector<int>(s2+1, -1));
        return countNoofSubsets(n-1,s2,arr,dp);
    }
}


-----------------------------------------------------------------------------------------------------------------------------------------------------------------

Method 3: Tabulation


#include <bits/stdc++.h> 
int mod = (int)(1e9 + 7);
int countPartitions(int n, int d, vector<int> &arr) {
    int totsum = 0;
    for(int i=0; i<n; i++) totsum += arr[i];
    
    if(totsum -d < 0) return 0;
    if((totsum-d) % 2 == 1) return 0;
    
    else
    {
        int s2 = (totsum - d)/2;
        int dp[n][s2+1];
        
        for(int i=0; i<n; i++)
            for(int j=0; j<=s2; j++)
                dp[i][j] = 0;
        
       if(arr[0] == 0) dp[0][0]=2;
       else dp[0][0] = 1;
       
       if(arr[0] != 0 && arr[0] <= s2)
            dp[0][arr[0]] = 1;
        
        for(int i=1; i<n; i++)
        {
            for(int j=0; j<=s2; j++)
            { 
                int notTake = dp[i-1][j];
                int take = 0;
                if(arr[i] <= j)
                    take = dp[i-1][j-arr[i]];
                dp[i][j] = (take + notTake) % mod;
            }
        }
        return dp[n-1][s2];
    }
}


