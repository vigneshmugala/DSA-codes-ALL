Problem Link:


-----------------------------------------------------------------------------------------------------------------

Method 1 : Recursion

#include<bits/stdc++.h>
bool partHalf(int i, int sub1, int sub2, int n, vector<int> &arr)
{
    if(i>=n)
    {
        if(sub1 == sub2) return true;
        return false;
    }
    
    bool pickInFirstSub = partHalf(i+1,sub1+arr[i],sub2,n,arr);
    bool pickInSecondSub = partHalf(i+1,sub1,sub2+arr[i],n,arr);
    
    return pickInFirstSub | pickInSecondSub;
}

bool canPartition(vector<int> &arr, int n)
{
	return partHalf(0,0,0,n,arr);
}


---------------------------------------------------------------------------------------

Method 2: Memoization
(diff method)

#include<bits/stdc++.h>

bool subSeqwithSum(int i, int n, int sum, vector<int> &arr, vector<vector<int>> &dp)
{
    if(sum == 0) return true;
    
    if(sum < 0) return false;
    
    if(i>=n) return (sum == 0);
    
    if(dp[i][sum] != -1) return dp[i][sum];
    
    bool pick = subSeqwithSum(i+1, n, sum-arr[i], arr, dp);
    
    bool notPick = subSeqwithSum(i+1, n, sum , arr, dp);
    
    return dp[i][sum] = pick | notPick;
    
}
bool canPartition(vector<int> &arr, int n)
{
	int sum = 0;
    for(int i=0;i<n;i++) sum+= arr[i];
    
    if(sum % 2 == 1) return false;
    else
    {
        vector<vector<int>> dp(n, vector<int>((sum/2)+1 , -1));
        return subSeqwithSum(0,n,sum/2,arr,dp);
    }
}


------------------------------------------------------------------------------------------------------

Method 3: Tabulation

#include<bits/stdc++.h>
bool canPartition(vector<int> &arr, int n)
{
	int sum = 0;
    for(int i=0; i<n; i++) sum += arr[i];
    
    if(sum % 2 == 1) return false;
    else
    {
        //Tabulation
        vector<vector<bool>> dp(n, vector<bool> (sum/2 + 1 , false));
        for(int i=0; i<n; i++) dp[i][0] = true;
        if(arr[0] <= sum/2)
           dp[0][arr[0]] = true;
        for(int i=1; i<n; i++)
        {
            for(int j=0; j<=sum/2; j++)
            {
                bool notTake = dp[i-1][j];
                bool take = false;
                if(arr[i] <= j)
                    take = dp[i-1][j-arr[i]];
                dp[i][j] = take|notTake;
            }
        }
        return dp[n-1][sum/2];
    }
}
