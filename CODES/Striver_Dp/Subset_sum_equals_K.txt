Problem link:

https://www.codingninjas.com/codestudio/problems/subset-sum-equal-to-k_1550954?leftPanelTab=0
-----------------------------------------------------------------------------------------------------------


Method 1: Memo + recursion

#include <bits/stdc++.h>

using namespace std;

bool subsetSumUtil(int ind, int target, vector<int>& arr, vector<vector<int>> &dp){
    if(target==0)
        return true;
    
    if(ind == 0)
        return arr[0] == target;
    
    if(dp[ind][target]!=-1)
        return dp[ind][target];
        
    bool notTaken = subsetSumUtil(ind-1,target,arr,dp);
    
    bool taken = false;
    if(arr[ind]<=target)
        taken = subsetSumUtil(ind-1,target-arr[ind],arr,dp);
        
    return dp[ind][target]= notTaken||taken;
}

bool subsetSumToK(int n, int k, vector<int> &arr){
    vector<vector<int>> dp(n,vector<int>(k+1,-1));
    
    return subsetSumUtil(n-1,k,arr,dp);
}

int main() {

  vector<int> arr = {1,2,3,4};
  int k=4;
  int n = arr.size();
                                 
  if(subsetSumToK(n,k,arr))
    cout<<"Subset with given target found";
  else 
    cout<<"Subset with given target not found";
}


-----------------------------------------------------------------------------------------------


Method 2: Tabulation


#include <bits/stdc++.h> 
bool subsetSumToK(int n, int k, vector<int> &arr) {
    // if(target == 0) return true;
    vector<vector<bool>>dp(n, vector<bool>(k+1 , false));
    for(int i=0; i<n; i++) dp[i][0] = true;
    
    //if(ind == 0) return (arr[0] == target);
   if(arr[0] <=k){
    dp[0][arr[0]] = true;
   }
    
    for(int i=1; i<n; i++)
    {
        for(int target=1; target<=k; target++)
        {
            bool notTaken = dp[i-1][target];
            bool taken = false;
            if(arr[i] <= target)
                taken = dp[i-1][target - arr[i]];
            dp[i][target] = taken|notTaken;
        }
    }
    return dp[n-1][k];
}