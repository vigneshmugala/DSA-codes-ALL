Problem link
https://www.codingninjas.com/codestudio/problems/number-of-subsets_3952532?source=youtube&campaign=striver_dp_videos&utm_source=youtube&utm_medium=affiliate&utm_campaign=striver_dp_videos
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------


Method 1: Recursion
#include <bits/stdc++.h>

int help(int i, int tar, vector<int> &num)
{
    if(tar == 0) return 1;
    if(i >= num.size()) if(tar == 0) return 1; else return 0;
    
    int takeEle = help(i+1 , tar-num[i] , num);
    int notTakeEle = help(i+1, tar, num);
    
    return takeEle+notTakeEle;
}


int findWays(vector<int> &num, int tar)
{
    return help(0,tar,num);
}
------------------------------------------------------------------------------

Method 2: Memoization

#include <bits/stdc++.h>

int help(int i, int tar, vector<int> &num,vector<vector<int>> &dp)
{
    if(tar == 0) return 1;
   
    if(i == 0)
    {
        return num[0] == tar;
    }
    
    if(dp[i][tar] != -1) return dp[i][tar];
    
    int notTakeEle = help(i-1, tar, num, dp);
  
    int takeEle = 0;
    
    if(num[i] <= tar){
       takeEle = help(i-1 , tar-num[i] , num, dp);
    }
   
    return dp[i][tar] = takeEle+notTakeEle;
}


int findWays(vector<int> &num, int tar)
{
    int n = num.size();
    vector<vector<int>> dp(n , vector<int> (tar+1, -1));
    return help(n-1,tar,num,dp);
}

-----------------------------------------------------------------------------------------------

Method 3: Tabulation


#include <bits/stdc++.h> 
int findWays(vector<int> &num, int tar)
{
    int n = num.size();
    int dp[n][tar+1];
    
    for(int i=0; i<n; i++)
        for(int j=0; j<tar+1; j++)
            dp[i][j]=0;
    
    //Work from 0th index from target 0, final answer will be stored in dp[n-1][tar];
    
    //if(target == 0) return 1;
    // ee index ki aina target 0 osthe aa index lo 1 fill cheyandi
    for(int i=0; i<n; i++) dp[i][0] = 1;
    
    //if(i == 0) return num[0]==tar;
    // if index i equal to 0, then when target is equal to num[0] it's correct answer dp[][] entry is 1;
    
    if(num[0] <= tar){
    dp[0][num[0]] = 1;
    }
    
    //Now start filling the DP table, so the two parameters are i and tar, i goes from 1 to n-1 
    //target goes from 1 to tar;
    
    for(int i=1; i<n; i++)
    {
        for(int j=1; j<=tar; j++)
        {
            //Copy the entire recurrence relation here 
            int take = 0;
            int nottake = dp[i-1][j];
            if(num[i] <= j)
                take = dp[i-1][j-num[i]];
            dp[i][j] = take+nottake;
        }
    }
    return dp[n-1][tar];
}