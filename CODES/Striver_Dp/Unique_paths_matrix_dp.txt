Problem link:

https://www.codingninjas.com/codestudio/problems/total-unique-paths_1081470?source=youtube&campaign=striver_dp_videos&utm_source=youtube&utm_medium=affiliate&utm_campaign=striver_dp_videos&leftPanelTab=1


-----------------------------------------------------------------------------------------------------------------


Method 1: RECURSION

#include <bits/stdc++.h>
int help(int i, int j, int m, int n)
{
    //Base case
    if(i<0 || j<0 || i>=m || j>=n) return 0;
    
    if(i == m-1 && j==n-1) return 1;
    
    int right = help(i,j+1,m,n); 
    int down =  help(i+1,j,m,n);
    
    return right+down;
}

int uniquePaths(int m, int n) {
 
    int ans = help(0,0,m,n);
    return ans;
}


----------------------------------------------------------------------------------------------------------------

Method 2: MEMOIZATION

#include <bits/stdc++.h>
int help(int i, int j, int m, int n, vector<vector<int>> &dp)
{
    //Base case
    if(i<0 || j<0 || i>=m || j>=n) return 0;
    
    if(i == m-1 && j==n-1) return 1;
    
    if(dp[i][j] != -1) return dp[i][j];
    
    int right = help(i,j+1,m,n,dp); 
    int down =  help(i+1,j,m,n,dp);
    
    return dp[i][j] = right+down;
}

int uniquePaths(int m, int n) {
    vector<vector<int>> dp(m,vector<int>(n,-1));
    int ans = help(0,0,m,n,dp);
    return ans;
}


------------------------------------------------------------------------------------------------------------------

Method 3: TABULATION


#include <bits/stdc++.h> 
int uniquePaths(int m, int n) {
	vector<vector<int>> dp(m, vector<int> (n,0));
    dp[m-1][n-1] = 1;
    for(int i=m-1; i>=0; i--)
    {
        for(int j=n-1; j>=0; j--)
        {
            if(i == m-1 && j == n-1)
            {
                dp[m-1][n-1] = 1;
                continue;
            }
            
            int right = 0;
            int down = 0;
            
            if(i<m-1) right = dp[i+1][j];
            if(j<n-1) down = dp[i][j+1];
            
            dp[i][j] = right+down;
            
        }
    }
    return dp[0][0];
}

----------------------------------------------------------------------------------------------

Method 4: Space Optimization


#include <bits/stdc++.h>

using namespace std;

int countWays(int m, int n){
    vector<int> prev(n,0);
    for(int i=0; i<m; i++){
        vector<int> temp(n,0);
        for(int j=0; j<n; j++){
            if(i==0 && j==0){
                temp[j]=1;
                continue;
            }
            
            int up=0;
            int left =0;
            
            if(i>0)
                up = prev[j];
            if(j>0)
                left = temp[j-1];
                
            temp[j] = up + left;
        }
        prev = temp;
    }
    
    return prev[n-1];
    
}

int main() {

  int m=3;
  int n=2;
  
  cout<<countWays(m,n);
}

