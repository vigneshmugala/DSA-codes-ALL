Problem Link:
https://www.codingninjas.com/codestudio/problems/maze-obstacles_977241?leftPanelTab=1

----------------------------------------------------------------------------------------------------
Method 1: Recursion

#include<bits/stdc++.h>
int help(int i,int j,int n,int m,vector<vector<int>> &mat)
{
    if(i==(n-1) && j==(m-1)) return 1;
    
    if(i<0 || j<0 || i>=n || j>=m || mat[i][j] == -1) return 0;
        
     int right = help(i,j+1,n,m,mat);
     int down = help(i+1,j,n,m,mat);
    
     return (down+right);
}


int mazeObstacles(int n, int m, vector<vector<int>> &mat) {
    return help(0,0,n,m,mat);
}

------------------------------------------------------------------------------------------------------


Method 2: Memoization

#include<bits/stdc++.h>
//int mod = (int)(1e9 + 7);
int help(int i, int j, int n, int m, vector<vector<int>> &mat, vector<vector<int>> &dp)
{   
    if(i == n-1 && j == m-1) return 1;
    
    if(i<0 || j<0 || i>=n || j>=m || mat[i][j] == -1) return 0;
    
    if(dp[i][j] != -1) return dp[i][j];
    
    int right = help(i,j+1,n,m,mat,dp);
    int down = help(i+1,j,n,m,mat,dp);
    
    return dp[i][j] = (right+down)  % mod; (//mod done because problem said so)
}

int mazeObstacles(int n, int m, vector< vector< int> > &mat) {
    vector<vector<int>> dp(n,vector<int>(m,-1));
    return help(0,0,n,m,mat,dp);
}

-----------------------------------------------------------------------------------------------------

Method 3: Tabulation


int mazeObstacles(int n, int m, vector< vector< int> > &mat) {
    int dp[n][m];
    dp[0][0] = 1;
    for(int i=0;i<n;i++)
    {
        for(int j=0;j<m;j++)
        {
            if(mat[i][j] == -1) dp[i][j] = 0;
            else if(i==0 && j==0) dp[i][j] = 1;
            else
            {
                int up = 0;
                int left = 0;
                if(i>0) up = dp[i-1][j];
                if(j>0) left = dp[i][j-1];
                dp[i][j] = (up+left);
            }
        }
    }
    return dp[n-1][m-1];
}


----------------------------------------------------------------------------------------------------------------