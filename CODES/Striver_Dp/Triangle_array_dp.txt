Problem Link:

https://www.codingninjas.com/codestudio/problems/triangle_1229398?source=youtube&campaign=striver_dp_videos&utm_source=youtube&utm_medium=affiliate&utm_campaign=striver_dp_videos&leftPanelTab=1


-----------------------------------------------------
Method 1: Recursion


#include<bits/stdc++.h>

int help(int i, int j, int n ,vector<vector<int>> &triangle)
{
    if(i == n-1) return triangle[i][j];
    
    int str_down =  triangle[i][j] + help(i+1,j,n,triangle);
    int str_down_right = triangle[i][j] + help(i+1,j+1,n,triangle);
    
    return min(str_down , str_down_right);
}


int minimumPathSum(vector<vector<int>>& triangle, int n){
	return help(0,0,n,triangle);
}


-------------------------------------------------------------------------------------


Method 2: Memoization

#include<bits/stdc++.h>

int help(int i, int j, int n ,vector<vector<int>> &triangle,vector<vector<int>> &dp)
{
    if(i == n-1) return triangle[i][j];
        
    if(dp[i][j] != INT_MIN) return dp[i][j];
    
    int str_down =  triangle[i][j] + help(i+1,j,n,triangle,dp);
    int str_down_right = triangle[i][j] + help(i+1,j+1,n,triangle,dp);
    
    return dp[i][j] = min(str_down , str_down_right);
}


int minimumPathSum(vector<vector<int>>& triangle, int n){
    vector<vector<int>> dp(n, vector<int>(n,INT_MIN));
	return help(0,0,n,triangle,dp);
}


-
--------------------------------------------------------------------------------------

Method 3: Tabulation

//We only get answer when we work up from bottom row 
// to top cell 0,0

#include <bits/stdc++.h> 
int minimumPathSum(vector<vector<int>>& triangle, int n){
	vector<vector<int> > dp(n,vector<int>(n,0));
    
    for(int j=0;j<n;j++){
        dp[n-1][j] = triangle[n-1][j];
    }
    
    for(int i=n-2; i>=0; i--){
        for(int j=i; j>=0; j--){
             int down = triangle[i][j] + dp[i+1][j];
             int diagonal = triangle[i][j] + dp[i+1][j+1];
             dp[i][j] = min(down,diagonal);
        }
    }
    
    return dp[0][0];
}


-----------------------------------------------------------------------------------------