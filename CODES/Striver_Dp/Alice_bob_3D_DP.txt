Problem Link:

https://www.codingninjas.com/codestudio/problems/ninja-and-his-friends_3125885?source=youtube&campaign=striver_dp_videos&utm_source=youtube&utm_medium=affiliate&utm_campaign=striver_dp_videos&leftPanelTab=1

=-----------------------------------------------------------------------------------------------------------------------------

Method 1: Memoization + Recursion


#include <bits/stdc++.h>
int maxCh(int i, int j1, int j2, int r, int c, vector<vector<int>> &grid,vector<vector<vector<int>>> &dp3)
{
    //base cases are 2 types: -> Out of bounds and ->Destination case
    if(j1<0||j1>=c||j2<0||j2>=c) return -1e9;
    
    if(i == r-1)
    {
        //if alice(j1) and bob(j2) in same cell return only that cell value only
        if(j1 == j2)
        {
            return grid[i][j1];
        }
        //else return both values.
        else
        {
             return grid[i][j1] + grid[i][j2];
        }
    }
    
    
    if(dp3[i][j1][j2] != -1) return dp3[i][j1][j2];
    // for each alice position, bob can have 3 possible positions
    int maxVal=INT_MIN;
    for(int k=-1;k<=1;k++)
    {
        for(int l=-1;l<=1;l++)
        {
            int rec;
            if(j1 == j2) rec = grid[i][j1] + maxCh(i+1,j1+k,j2+l,r,c,grid,dp3);
            else rec = grid[i][j1] + grid[i][j2] + maxCh(i+1,j1+k,j2+l,r,c,grid,dp3); 
            maxVal = max(maxVal , rec);
        }
    }
    return dp3[i][j1][j2] = maxVal;
}


int maximumChocolates(int r, int c, vector<vector<int>> &grid) {
    vector<vector<vector<int>>> dp3(r,vector<vector<int>>(c,vector<int>(c,-1)));
    return maxCh(0,0,c-1,r,c,grid,dp3);
}


----------------------------------------------------------------------------------------------------------------------------------------------------------------

Method 2: Tabulation


#include <bits/stdc++.h> 
int maximumChocolates(int r, int c, vector<vector<int>> &grid) {
    //First step is to declare 3D dp array
    int dp[r][c][c];
    //Second step is to fill all base case entries in 3D dp array (base case is at when)
    // when row(i) is at r-1 fill all possibilites.
    
    for(int j1=0; j1<c; j1++)
    {
        for(int j2=0; j2<c; j2++)
        {
            if(j1 == j2) dp[r-1][j1][j2] = grid[r-1][j1];
            else dp[r-1][j1][j2] = grid[r-1][j1] + grid[r-1][j2];
        }
    }
    
    //third step is to decide the iterators, i row will iterate from r-2 to 0 using previous row values
    // j1 alice pos will iterate from 0 to c-1 
    // j2 bob pos will iterate from 0 to c-1
    // inside to fill dp[i][j1][j2] we will copy the entire recurrence relations we used in memoization inside this.
    
    for(int i=r-2; i>=0; i--)
    {
        for(int j1=0; j1<c; j1++)
        {
            for(int j2=0; j2<c; j2++)
            {
                //write entire recurrernce in this to fill all entries in 3d dp table
                // 9 possibilities in total. 3X3 
                int maxVal = INT_MIN;
                for(int k=-1; k<=1; k++)
                {
                    for(int l=-1; l<=1; l++)
                    {
                        int rec;
                        if(j1 == j2) rec = grid[i][j1];
                        else rec = grid[i][j1] + grid[i][j2];
                        
                        if((j1+k < 0 || j1+k >= c) || (j2+l < 0 || j2+l >=c))
                        {
                            rec += -1e9;
                        }
                        else rec+= dp[i+1][j1+k][j2+l];
                        
                        maxVal = max(maxVal , rec);
                    }
                }
                dp[i][j1][j2] = maxVal; 
            }
        }
    }
    //Final accumulated bottom up solution will get stored at initial state, i=0 j1 alice at 0, j2 bob starting at c-1 pos, so final answer is at dp[0][0][c-1]
    return dp[0][0][c-1];
}