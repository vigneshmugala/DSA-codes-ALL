Given two strings a and b, return the minimum number of times you should repeat string a so that 
string b is a substring of it. If it is impossible for b to be a substring of a after repeating it,
return -1.

Notice: string "abc" repeated 0 times is "", repeated 1 time is "abc" and repeated 2 times is 
"abcabc".

 

Example 1:
input =abcd
cdabcdab
output =3

Input: a = "abcd", b = "cdabcdab"
Output: 3
Explanation: We return 3 because by repeating a three times of a ie abcd is "abcdabcdabcd", b ie cdabcdab is a 
substring of it.



Example 2:
input =a
aa
output =2

    #include<bits/stdc++.h>
    using namespace std;
    bool checkSub(string s, string t)
    {
       vector<string>all;
       for(int i=0;i<s.length();i++)
       {
           if(s[i]==t[0])
           {
               string k = s.substr(i,t.length());
               all.push_back(k);
           }
       }
       
       for(string n:all)
       {
           if(n==t)
           {
               return true;
           }
       }
      return false;
    }
    int main(){
        string s,t;
        cin>>s;
        cin>>t;
        int count=0;
        string temp=s;
        s="";
        bool found=false;
        while(!found)
        {
          if(s.length()>=t.length())
          {
            if(checkSub(s,t))
            {
                found=true;
                break;
            }
          }
            s+=temp;
            count++;
           if(count>10){count = -1;break;}
        }
        cout<<count<<endl;
    }