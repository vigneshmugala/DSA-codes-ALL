You are given a string s.

A split is called good if you can split s into two non-empty strings sleft and sright where their concatenation is equal to s (i.e., sleft + sright = s) and the number of distinct letters in sleft and sright is the same.

Return the number of good splits you can make in s.

 
input =aacaba
output: 2

Explanation: There are 5 ways to split "aacaba" and 2 of them are good. 
("a", "acaba") Left string and right string contains 1 and 3 different letters respectively.
("aa", "caba") Left string and right string contains 1 and 3 different letters respectively.
("aac", "aba") Left string and right string contains 2 and 2 different letters respectively (good split).
("aaca", "ba") Left string and right string contains 2 and 2 different letters respectively (good split).
("aacab", "a") Left string and right string contains 3 and 1 different letters respectively.


Example 2:
input = abcd
Output: 1

Explanation: Split the string as follows ("ab", "cd").


#include<bits/stdc++.h>
using namespace std;
vector<string> splitter(int left,int right,string str)
{
    string a="";
    string b="";
    vector<string>t;
    for(int i=0;i<left;i++)
    {
        a+=str[i];
    }
    
    for(int j=a.length();j<str.length();j++)
    {
         b+=str[j];
    }
    t.push_back(a);
    t.push_back(b);
  return t;
}
bool isDist(string s, string t)
{
    int a,b;
    set<char>temp;
    for(int i=0;i<s.length();i++){temp.insert(s[i]);}
    a=temp.size();
    temp.clear();
    for(int j=0;j<t.length();j++){temp.insert(t[j]);}
    b=temp.size();
    if(a==b){return true;}else{return false;}
}
/*bool gs(vector<string>v,string str)
{
    string temp="";
    for(string x:v){temp+=x;}
    if(temp==str&&isDist(temp,str)){return true;}
    else{return false;}
}*/

int main()
{
    string str;
    cin>>str;
    
    vector<string>v;
    
    int good=0;
    for(int i=0;i<str.length();i++)
    {
        v=splitter(i+1,str.length()-1+i,str);
        //for(auto x:v){cout<<x<<" ";}
        //cout<<endl;
        if(isDist(v[0],v[1])){good++;}
    }
    cout<<good<<endl;
}