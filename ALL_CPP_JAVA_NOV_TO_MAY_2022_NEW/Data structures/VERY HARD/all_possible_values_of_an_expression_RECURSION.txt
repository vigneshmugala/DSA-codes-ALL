Given a string expression of numbers and operators, return all possible results from computing all the different possible ways to group numbers and operators.
Note: assume operators will have only +,-,*
      All integer values must be in range between 0 to 99

Example 1:
input =2-1-1
output =0 2

expression = "2-1-1"
Output: [0,2]
Explanation:
((2-1)-1) = 0 
(2-(1-1)) = 2

Note : print the output in ascending order 

Example 2:
input =2*3-4*5
output =-34 -14 -10 -10 10

expression = "2*3-4*5"
Output: [-34,-14,-10,-10,10]

Explanation:
(2*(3-(4*5))) = -34 
((2*3)-(4*5)) = -14 
((2*(3-4))*5) = -10 
(2*((3-4)*5)) = -10 
(((2*3)-4)*5) = 10



#include<bits/stdc++.h>
using namespace std;
int calcforthree(int a,char op,int b)
{
  if(op=='+')
  {
      return (a+b);
  }
  else if(op=='-')
  {
      return (a-b);
  }
  else
  {
      return (a*b);
  }
}
vector<int> calculateAll(string e, int left, int right)
{
  vector<int>v;
  //base case
  if(left==right)
  {
      v.push_back(e[left]-'0');
      return v;
  }
  else if(right==3)
  {
    v.push_back(calcforthree(e[left]-'0',e[left+1]-'0',e[left+2]-'0'));
    return v;
      
  }
  for(int i=left+1;i<=right;i+=2)
  {
     vector<int>l;
     vector<int>r;
     l=calculateAll(e,left,i-1);
     r=calculateAll(e,i+1,right);
     
     for(int j=0;j<l.size();j++)
     {
         for(int k=0;k<r.size();k++)
         {
             int temp=calcforthree(l[j],e[i],r[k]);
             v.push_back(temp);
         }
     }
  }
  return v;
}

int main()
{
    string e;
    cin>>e;
    
    vector<int>result;
    result = calculateAll(e,0,e.length()-1);
    sort(result.begin(),result.end());
    cout<<"[";
    for(int z=0;z<result.size();z++)
    {
      if(z!=result.size()-1)
        cout<<result[z]<<",";
      else
        cout<<result[z];
    }
    cout<<"]";
}